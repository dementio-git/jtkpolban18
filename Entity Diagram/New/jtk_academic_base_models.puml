@startuml jtk_academic_base
!define Model(name,desc) class name as "desc" << (M,#FFAAAA) >>
!define TransientModel(name,desc) class name as "desc" << (T,magenta) >>
!define AbstractModel(name,desc) class name as "desc" << (T,green) >>
!define model(x) -<b>_<color:red>x</color></b>
!define char(x) +<b><i>x</i> Char</b>
!define m2o(x) +<b><color:magenta><i>x</i> Many2one</color></b>
!define m2m(x) +<b><color:magenta><i>x</i> Many2many</color></b>
!define o2m(x) +<b><color:darkorange><i>x</i> One2many</color></b>
!define ref(x) +<b><color:magenta><i>x</i> Reference</color></b>
!define text(x) +<b><i>x</i> Text</b>
!define html(x) +<b><i>x</i> Html</b>
!define int(x) +<b><color:blue><i>x</i> Integer</color></b>
!define float(x) +<b><color:blue><i>x </i>Float</color></b>
!define money(x) +<b><color:blue><i>x </i>Monetary</color></b>
!define sel(x) +<b><color:green><i>x</i> Selection</color></b>
!define bool(x) +<b><color:darkblue><i>x</i> Boolean</color></b>
!define date(x) +<b><color:darkgreen><i>x</i> Date</color></b>
!define dtime(x) +<b><color:darkgreen><i>x</i> Datetime</color></b>
!define bin(x) +<b><color:purple><i>x</i> Binary</color></b>
!define help(x) x
!define cm(x) <color:magenta>->x</color>
!define inv(x) <color:darkorange><-x</color>
!define rtbl(x) <color:magenta>x</color>
!define col1(x) <color:magenta>x</color>
!define col2(x) <color:magenta>x</color>
!define dom(x) <color:red>x</color>
!define is(x) <color:red>x</color>
!define not(x) <color:red><s>x</s></color>
!define variants(x) <color:green>x</color>
!define default(x) <color:red>default=x</color>
!define related(x) <color:red><i>-->x</i></color>
!define compute(x) <color:red>x()</color>
hide methods
hide stereotypes

package "New" {

Model(ClassClass, "Class") {
model(name) class.class
model(inherit) base
==New or Modified==
char(name) Nama
..
char(code) Kode
..
bool(active) Active
default(lambda self: ...())
..
m2o(study_program_id) Program Studi
cm(study.program)
..
sel(semester) Semester
variants(1: Semester 1; 2: Semester 2; 3: Semester 3; 4: Semester 4; 5: Semester 5; 6: Semester 6; 7: Semester 7; 8: Semester 8)
..
o2m(student_ids) Students
cm(student.student) inv(class_id)
not(copy)
..
}

Model(LecturerLecturer, "Lecturer") {
model(name) lecturer.lecturer
model(inherit) base
==New or Modified==
m2o(partner_id) Partner ID
cm(res.partner)
is(required)
..
char(name) Nama
related(partner_id.name)
is(computed) is(stored)
not(copy)
..
char(email) Email
related(partner_id.email)
is(computed) is(stored)
not(copy)
..
char(phone) Phone
related(partner_id.phone)
is(computed) is(stored)
not(copy)
..
char(nip) NIP
is(required)
..
char(expertise) Expertise
..
bool(active) Active
default(lambda self: ...())
..
}

Model(StudentGroup, "Student Group") {
model(name) student.group
model(inherit) student.group
==New or Modified==
char(name) Nama
is(required)
..
m2o(class_id) Kelas
cm(class.class)
..
o2m(student_group_line_ids) Anggota Kelompok
cm(student.group.line) inv(group_id)
not(copy)
..
}

Model(StudentGroupLine, "Student Group Line") {
model(name) student.group.line
model(inherit) base
==New or Modified==
m2o(student_id) Mahasiswa
cm(student.student)
..
m2o(role) Role
cm(student.group.role)
..
bool(is_leader) Ketua Kelompok
..
m2o(group_id) Kelompok Mahasiswa
cm(student.group)
..
}

Model(StudentGroupRole, "Student Group Role") {
model(name) student.group.role
model(inherit) base
==New or Modified==
char(name) Nama
is(required)
..
}

Model(StudentStudent, "Student") {
model(name) student.student
model(inherit) student.student
==New or Modified==
m2o(partner_id) Partner ID
cm(res.partner)
..
char(name) Nama
related(partner_id.name)
is(computed) is(stored)
not(copy)
..
char(email) Email
related(partner_id.email)
is(computed) is(stored)
not(copy)
..
char(phone) Telepon
related(partner_id.phone)
is(computed) is(stored)
not(copy)
..
char(nim) NIM
..
sel(gender) Jenis Kelamin
variants(male: Laki-laki; female: Perempuan)
..
char(school_origin) Asal Sekolah
..
float(current_gpa) IPK Terbaru
..
m2o(class_id) Kelas
cm(class.class)
..
}

Model(StudyProgram, "Study Program") {
model(name) study.program
model(inherit) base
==New or Modified==
char(name) Nama
is(required)
..
char(code) Kode
is(required)
..
bool(active) Active
default(lambda self: ...())
..
text(description) Description
..
m2o(head_of_program) Head of Program
cm(lecturer.lecturer)
..
}

Model(SubjectSubject, "Subject") {
model(name) subject.subject
model(inherit) base
==New or Modified==
char(name) Nama
is(required)
..
char(code) Kode
is(required)
..
bool(active) Active
default(lambda self: ...())
..
bool(is_practicum) Mata Kuliah Praktikum
default(lambda self: ...())
..
m2o(study_program_id) Program Studi
cm(study.program)
..
}

}

package "Inherited" {

Model(ResPartner, "Kontak") {
model(inherit) res.partner
==New or Modified==
m2o(lecturer_id) Lecturer Record
cm(lecturer.lecturer)
..
m2o(student_id) Student ID
cm(student.student)
..
}

}


StudentStudent --> "class_id" ClassClass: "student_ids"
StudentGroupLine --> "group_id" StudentGroup: "student_group_line_ids"
ClassClass --> "study_program_id" StudyProgram
LecturerLecturer --> "partner_id" ResPartner
ResPartner --> "lecturer_id" LecturerLecturer
ResPartner --> "student_id" StudentStudent
StudentGroup --> "class_id" ClassClass
StudentGroupLine --> "student_id" StudentStudent
StudentGroupLine --> "role" StudentGroupRole
StudentStudent --> "partner_id" ResPartner
StudyProgram --> "head_of_program" LecturerLecturer
SubjectSubject --> "study_program_id" StudyProgram
@enduml