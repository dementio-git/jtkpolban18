@startuml jtk_logbook_base
!define Model(name,desc) class name as "desc" << (M,#FFAAAA) >>
!define TransientModel(name,desc) class name as "desc" << (T,magenta) >>
!define AbstractModel(name,desc) class name as "desc" << (T,green) >>
!define model(x) -<b>_<color:red>x</color></b>
!define char(x) +<b><i>x</i> Char</b>
!define m2o(x) +<b><color:magenta><i>x</i> Many2one</color></b>
!define m2m(x) +<b><color:magenta><i>x</i> Many2many</color></b>
!define o2m(x) +<b><color:darkorange><i>x</i> One2many</color></b>
!define ref(x) +<b><color:magenta><i>x</i> Reference</color></b>
!define text(x) +<b><i>x</i> Text</b>
!define html(x) +<b><i>x</i> Html</b>
!define int(x) +<b><color:blue><i>x</i> Integer</color></b>
!define float(x) +<b><color:blue><i>x </i>Float</color></b>
!define money(x) +<b><color:blue><i>x </i>Monetary</color></b>
!define sel(x) +<b><color:green><i>x</i> Selection</color></b>
!define bool(x) +<b><color:darkblue><i>x</i> Boolean</color></b>
!define date(x) +<b><color:darkgreen><i>x</i> Date</color></b>
!define dtime(x) +<b><color:darkgreen><i>x</i> Datetime</color></b>
!define bin(x) +<b><color:purple><i>x</i> Binary</color></b>
!define help(x) x
!define cm(x) <color:magenta>->x</color>
!define inv(x) <color:darkorange><-x</color>
!define rtbl(x) <color:magenta>x</color>
!define col1(x) <color:magenta>x</color>
!define col2(x) <color:magenta>x</color>
!define dom(x) <color:red>x</color>
!define is(x) <color:red>x</color>
!define not(x) <color:red><s>x</s></color>
!define variants(x) <color:green>x</color>
!define default(x) <color:red>default=x</color>
!define related(x) <color:red><i>-->x</i></color>
!define compute(x) <color:red>x()</color>
hide methods
hide stereotypes

package "New" {

Model(LogbookExtraction, "Logbook Extraction Model") {
model(name) logbook.extraction
model(inherit) base
==New or Modified==
char(name) Kode
is(computed) is(stored)
is(readonly) not(copy)
..
m2o(logbook_id) Logbook
cm(logbook.logbook)
is(required)
..
m2o(label_id) Label
cm(logbook.label)
..
text(content) Content
..
o2m(logbook_keyword_ids) Keyword
cm(logbook.keyword) inv(logbook_extraction_id)
not(copy)
..
char(level) Level
..
m2o(label_category_id) Kategori Label
cm(logbook.label.category)
related(label_id.category_id)
is(computed) is(stored)
is(readonly) not(copy)
..
m2o(label_sub_category_id) Sub Kategori Label
cm(logbook.label.sub.category)
related(label_id.sub_category_id)
is(computed) is(stored)
is(readonly) not(copy)
..
float(point) Poin
..
}

Model(LogbookKeyword, "Logbook Keyword") {
model(name) logbook.keyword
model(inherit) base
==New or Modified==
char(name) Keyword
..
m2o(logbook_extraction_id) Logbook Extraction
cm(logbook.extraction)
..
m2o(logbook_id) Logbook
cm(logbook.logbook)
..
}

Model(LogbookLabel, "Logbook Label") {
model(name) logbook.label
model(inherit) base
==New or Modified==
char(name) Label
is(required)
..
text(description) Deskripsi
..
bool(has_point) Poin
default(lambda self: ...())
..
text(points_rule) Aturan Poin
..
m2m(level_ids) Level
cm(_unknown)
rtbl(_unknown_logbook_label_rel) col1(logbook_label_id) col2(_unknown_id)
..
m2o(group_id) Group by Point
cm(logbook.label.group)
..
m2o(category_id) Kategori
cm(logbook.label.category)
..
m2o(sub_category_id) Sub Kategori
cm(logbook.label.sub.category)
..
bool(is_required) Wajib
default(lambda self: ...())
..
o2m(point_rule_ids) Aturan Poin
cm(logbook.label.point.rule) inv(label_id)
not(copy)
..
}

Model(LogbookLabelCategory, "Logbook Label Category") {
model(name) logbook.label.category
model(inherit) base
==New or Modified==
char(name) Kategori
is(required)
..
m2m(sub_category_ids) Sub Kategori
cm(logbook.label.sub.category)
rtbl(logbook_label_category_logbook_label_sub_category_rel) col1(logbook_label_category_id) col2(logbook_label_sub_category_id)
..
}

Model(LogbookLabelGroup, "Logbook Label Group") {
model(name) logbook.label.group
model(inherit) base
==New or Modified==
char(name) Group
..
}

Model(LogbookLabelPointRule, "Logbook Label Point Rule") {
model(name) logbook.label.point.rule
model(inherit) base
==New or Modified==
m2o(label_id) Label
cm(logbook.label)
..
char(name) Nama Aturan
is(computed) is(stored)
is(readonly) not(copy)
..
int(point) Poin
is(required)
..
char(description) Deskripsi
..
}

Model(LogbookLabelSubCategory, "Logbook Label Sub Category") {
model(name) logbook.label.sub.category
model(inherit) base
==New or Modified==
char(name) Sub Kategori
is(required)
..
m2m(category_ids) Kategori
cm(logbook.label.category)
rtbl(logbook_label_category_logbook_label_sub_category_rel) col1(logbook_label_sub_category_id) col2(logbook_label_category_id)
..
}

Model(LogbookLogbook, "Logbook") {
model(name) logbook.logbook
model(inherit) base
==New or Modified==
char(name) Kode Logbook
is(computed) is(stored)
is(readonly) not(copy)
..
m2o(student_id) Nama Mahasiswa
cm(student.student)
..
m2o(project_course_id) Mata Kuliah
cm(project.course)
..
m2o(week_id) Minggu Ke-
cm(course.activity)
is(computed) is(stored)
is(readonly) not(copy)
..
date(logbook_date) Tanggal Logbook
..
text(logbook_content) Isi Logbook
..
text(logbook_summary) Ringkasan Logbook
..
o2m(logbook_keyword_ids) Keyword
cm(logbook.keyword) inv(logbook_id)
not(copy)
..
o2m(logbook_extraction_ids) Logbook Extraction
cm(logbook.extraction) inv(logbook_id)
not(copy)
..
o2m(skill_extraction_ids) Skill Extraction
cm(skill.extraction) inv(logbook_id)
not(copy)
..
bool(is_extracted) Sudah diekstrak
default(lambda self: ...())
..
}

Model(ProjectCourse, "Project Course") {
model(name) project.course
model(inherit) project.course
is(activity)
==New or Modified==
m2m(logbook_label_ids) Logbook Labels
cm(logbook.label)
rtbl(logbook_label_project_course_rel) col1(project_course_id) col2(logbook_label_id)
..
}

note "<b>_unknown_logbook_label_rel</b>\nlogbook_label_id\n_unknown_id" as _unknown_logbook_label_rel
note "<b>logbook_label_category_logbook_label_sub_category_rel</b>\nlogbook_label_category_id\nlogbook_label_sub_category_id" as logbook_label_category_logbook_label_sub_category_rel
note "<b>logbook_label_project_course_rel</b>\nproject_course_id\nlogbook_label_id" as logbook_label_project_course_rel
}

package "Inherited" {

Model(SkillExtraction, "Skill Extraction") {
model(inherit) skill.extraction
==New or Modified==
m2o(logbook_id) Logbook
cm(logbook.logbook)
..
==Inherited==
m2o(student_id) Student
cm(student.student)
..
m2o(skill_item_id) Skill
cm(skill.item)
..
int(skill_point) Skill Point
..
m2o(skill_group_id) Skill Group
cm(skill.group)
related(skill_item_id.skill_group_id)
is(computed)
not(copy)
..
sel(skill_type) Skill Classification
variants(<function Selection.setup_related.<locals>.<lambda> at 0x0000026854641580>())
related(skill_group_id.skill_type)
is(computed)
not(copy)
..
text(content) Content
..
}

}

Model(SkillItem, "Skill Item") {
model(name) skill.item
}
Model(StudentStudent, "Student") {
model(name) student.student
}
Model(_unknown, "Tidak diketahui") {
model(name) _unknown
}
LogbookKeyword --> "logbook_extraction_id" LogbookExtraction: "logbook_keyword_ids"
LogbookLabelPointRule --> "label_id" LogbookLabel: "point_rule_ids"
LogbookKeyword --> "logbook_id" LogbookLogbook: "logbook_keyword_ids"
LogbookExtraction --> "logbook_id" LogbookLogbook: "logbook_extraction_ids"
SkillExtraction --> "logbook_id" LogbookLogbook: "skill_extraction_ids"
LogbookExtraction --> "label_id" LogbookLabel
LogbookLabel --> "group_id" LogbookLabelGroup
LogbookLabel --> "category_id" LogbookLabelCategory
LogbookLabel --> "sub_category_id" LogbookLabelSubCategory
LogbookLogbook --> "student_id" StudentStudent
LogbookLogbook --> "project_course_id" ProjectCourse
SkillExtraction --> "student_id" StudentStudent
SkillExtraction --> "skill_item_id" SkillItem
LogbookLabel .. _unknown_logbook_label_rel
_unknown_logbook_label_rel .. _unknown
LogbookLabelCategory .. logbook_label_category_logbook_label_sub_category_rel
logbook_label_category_logbook_label_sub_category_rel .. LogbookLabelSubCategory
ProjectCourse .. logbook_label_project_course_rel
logbook_label_project_course_rel .. LogbookLabel
@enduml